COMPLEXITY ANALYSIS

T(A,n)->Time complexity->Time taken by algorithm 'A' for input size 'n'
S(A,n)->Space complexity->Space taken by algorithm 'A' for input size 'n'

--------------------------------------------------------

THEORETICAL ANALYSIS

1. We count number of operations performed by algorithm for input size 'n'
2. More number of operations required==More time taken by algorithm

Operations->
Unit Operations->+,-,*,/,//,%,==,=,if,return,else
Not unit operations->loops

--------------------------------------------------------
Factorial code theoretical analysis

ans=1 -->1
for i in range(1,n):
    ans=ans*i     -->n*(1(for multiply ans*i)+1(for increment i))
return ans -->1

operations->1+1+n*(1+1)->2+2n->n
--------------------------------------------------------

O notation

O(n^2)->
algorithm A is O(n^2) if time taken by A is less than k*n^2
i.e  T(A,n)<=k*n^2

O(n^3)->
algorithm A is O(n^3) if time taken by A is less than k*n^3
i.e  T(A,n)<=k*n^3

--------------------------------------------------------
TIME COMPLEXITY ANALYSIS FOR RECURSION

for recusive functions Find recurrence relation
